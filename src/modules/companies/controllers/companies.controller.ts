import {
  Controller,
  Post,
  Body,
  HttpCode,
  Logger,
} from '@nestjs/common';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiSecurity,
  ApiBody,
} from '@nestjs/swagger';
import { OrchestrationService } from '../services/orchestration.service';
import { CompanyRequestDto } from '../dto/company-request.dto';
import { UnifiedCompanyDataDto } from '../dto/unified-company-data.dto';
import { ErrorResponseDto } from '../dto/error-response.dto';
import { CorrelationId } from '@modules/common/decorators/correlation-id.decorator';

/**
 * Companies Controller - Main API endpoint for company data retrieval
 *
 * Provides POST /api/companies endpoint that:
 * - Accepts NIP in request body (validated by ValidationPipe + DTO)
 * - Orchestrates data retrieval from GUS, KRS, CEIDG
 * - Returns unified company data format
 * - Includes correlation tracking
 *
 * Error Handling:
 * - All exceptions are handled by GlobalExceptionFilter
 * - No try-catch needed in controller (single responsibility principle)
 * - BusinessException from services propagates to filter automatically
 * - ValidationPipe errors (BadRequestException) are caught by GlobalExceptionFilter
 */

@ApiTags('companies')
@ApiSecurity('API-Key-Bearer')
@Controller('api/companies')
export class CompaniesController {
  private readonly logger = new Logger(CompaniesController.name);

  constructor(private readonly orchestrationService: OrchestrationService) {}

  @Post()
  @HttpCode(200)
  @ApiOperation({
    summary: 'Retrieve unified company data by NIP',
    description: `
Orchestrates data retrieval from multiple Polish government APIs (GUS, KRS, CEIDG)
to provide complete company information. Returns real-time data without caching.

The service follows a constitutional programming approach:
- State machine orchestration for reliable data flow
- Comprehensive error handling with correlation IDs
- Automatic retry logic with exponential backoff
- Data validation at all system boundaries
    `,
  })
  @ApiBody({
    type: CompanyRequestDto,
    description: 'Company data request with NIP',
    examples: {
      validRequest: {
        summary: 'Valid NIP request',
        description: 'Example of a valid company data request',
        value: {
          nip: '1234567890',
        },
      },
    },
  })
  @ApiResponse({
    status: 200,
    description: 'Company data retrieved successfully',
    type: UnifiedCompanyDataDto,
  })
  @ApiResponse({
    status: 400,
    description: 'Invalid NIP format or missing required fields',
    type: ErrorResponseDto,
  })
  @ApiResponse({
    status: 401,
    description: 'Invalid or missing API key',
    type: ErrorResponseDto,
  })
  @ApiResponse({
    status: 404,
    description: 'Company not found in any registry',
    type: ErrorResponseDto,
  })
  @ApiResponse({
    status: 408,
    description: 'Request timeout or external service timeout',
    type: ErrorResponseDto,
  })
  @ApiResponse({
    status: 422,
    description: 'Data classification or mapping failed',
    type: ErrorResponseDto,
  })
  @ApiResponse({
    status: 429,
    description: 'Rate limit exceeded',
    type: ErrorResponseDto,
  })
  @ApiResponse({
    status: 502,
    description: 'External service unavailable or bad gateway',
    type: ErrorResponseDto,
  })
  @ApiResponse({
    status: 503,
    description: 'Service degraded or circuit breaker open',
    type: ErrorResponseDto,
  })
  async getCompanyByNip(
    @Body() requestBody: CompanyRequestDto,
    @CorrelationId() correlationId: string,
  ): Promise<UnifiedCompanyDataDto> {
    // Correlation ID is always generated by CorrelationIdInterceptor and extracted by @CorrelationId() decorator

    this.logger.log(`Company data request initiated`, {
      nip: requestBody?.nip || 'not provided',
      correlationId,
    });

    // Request body is already validated by ValidationPipe + DTO
    // No manual validation needed - GlobalExceptionFilter handles all errors

    // Delegate to orchestration service
    // All errors are handled by GlobalExceptionFilter
    const companyData = await this.orchestrationService.getCompanyData(
      requestBody.nip,
      correlationId,
    );

    this.logger.log(`Company data request completed successfully`, {
      nip: requestBody.nip,
      correlationId,
      companyName: companyData.nazwa,
      dataSource: companyData.zrodloDanych,
    });

    return companyData;
  }

}
